const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { CONFIG, getXPForLevel } = require('../utils/leveling');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('levelexplain')
        .setDescription('üìö Learn how the leveling system works'),
    
    async execute(interaction) {
        try {
            // Create main explanation embed
            const mainEmbed = new EmbedBuilder()
                .setTitle('üìö Leveling System Explained')
                .setDescription('Here\'s everything you need to know about gaining XP and leveling up!')
                .setColor('#5865f2')
                .setThumbnail(interaction.guild.iconURL())
                .addFields(
                    {
                        name: 'üí¨ Message XP',
                        value: `‚Ä¢ **${CONFIG.XP_PER_MESSAGE} XP** per message\n‚Ä¢ **${CONFIG.MESSAGE_COOLDOWN / 60000} minute** cooldown between messages\n‚Ä¢ Only counts in text channels\n‚Ä¢ Bot messages don't count`,
                        inline: false
                    },
                    {
                        name: 'üé§ Voice XP',
                        value: `‚Ä¢ **${CONFIG.XP_PER_VOICE_MINUTE} XP** per minute in voice channels\n‚Ä¢ Must not be alone in the channel\n‚Ä¢ Must not be muted or deafened\n‚Ä¢ Automatic XP every minute`,
                        inline: false
                    },
                    {
                        name: 'üìà Exponential Level Progression',
                        value: `‚Ä¢ **Level 1**: 0 XP (starting point)\n‚Ä¢ **Level 2**: ${getXPForLevel(2)} XP needed\n‚Ä¢ **Level 5**: ${getXPForLevel(5)} XP needed\n‚Ä¢ **Level 10**: ${getXPForLevel(10)} XP needed\n‚Ä¢ **Level 25**: ${getXPForLevel(25)} XP needed\n‚Ä¢ Each level requires **${CONFIG.MULTIPLIER}x more XP** than the previous gap!`,
                        inline: false
                    }
                )
                .setFooter({ 
                    text: 'Use /level to check your progress!',
                    iconURL: interaction.client.user.displayAvatarURL()
                })
                .setTimestamp();

            // Create XP calculation examples embed
            const examplesEmbed = new EmbedBuilder()
                .setTitle('üßÆ XP Calculation Examples')
                .setColor('#00ff00')
                .addFields(
                    {
                        name: 'üí¨ Message Examples',
                        value: `‚Ä¢ **10 messages** = ${CONFIG.XP_PER_MESSAGE * 10} XP\n‚Ä¢ **50 messages** = ${CONFIG.XP_PER_MESSAGE * 50} XP\n‚Ä¢ **100 messages** = ${CONFIG.XP_PER_MESSAGE * 100} XP`,
                        inline: true
                    },
                    {
                        name: 'üé§ Voice Examples',
                        value: `‚Ä¢ **10 minutes** = ${CONFIG.XP_PER_VOICE_MINUTE * 10} XP\n‚Ä¢ **30 minutes** = ${CONFIG.XP_PER_VOICE_MINUTE * 30} XP\n‚Ä¢ **1 hour** = ${CONFIG.XP_PER_VOICE_MINUTE * 60} XP`,
                        inline: true
                    },
                    {
                        name: 'üéØ Level Goals (Exponential)',
                        value: `‚Ä¢ **Level 2**: ${Math.ceil(getXPForLevel(2) / CONFIG.XP_PER_MESSAGE)} messages OR ${Math.ceil(getXPForLevel(2) / CONFIG.XP_PER_VOICE_MINUTE)} minutes voice\n‚Ä¢ **Level 5**: ${Math.ceil(getXPForLevel(5) / CONFIG.XP_PER_MESSAGE)} messages OR ${Math.ceil(getXPForLevel(5) / CONFIG.XP_PER_VOICE_MINUTE)} minutes voice\n‚Ä¢ **Level 10**: ${Math.ceil(getXPForLevel(10) / CONFIG.XP_PER_MESSAGE)} messages OR ${Math.ceil(getXPForLevel(10) / CONFIG.XP_PER_VOICE_MINUTE)} minutes voice`,
                        inline: false
                    },
                    {
                        name: '‚ö° Exponential Growth',
                        value: `Higher levels require **exponentially more XP**!\n‚Ä¢ Level 25: ${getXPForLevel(25).toLocaleString()} XP (${Math.round(getXPForLevel(25) / 5 / 60 * 10) / 10} hours)\n‚Ä¢ Level 50: ${getXPForLevel(50).toLocaleString()} XP (${Math.round(getXPForLevel(50) / 5 / 60 * 10) / 10} hours)\n‚Ä¢ Level 100: ${getXPForLevel(100).toLocaleString()} XP (${Math.round(getXPForLevel(100) / 5 / 60 * 10) / 10} hours) üèÜ`,
                        inline: false
                    }
                )
                .setFooter({ 
                    text: 'Mix messages and voice chat for faster progression!',
                    iconURL: interaction.client.user.displayAvatarURL()
                });

            // Create tips and features embed
            const tipsEmbed = new EmbedBuilder()
                .setTitle('üí° Tips & Features')
                .setColor('#ffaa00')
                .addFields(
                    {
                        name: 'üöÄ Level Up Announcements',
                        value: '‚Ä¢ Automatic announcements when you level up\n‚Ä¢ Special badges for different level ranges\n‚Ä¢ Colorful embeds to celebrate your progress',
                        inline: false
                    },
                    {
                        name: 'üèÜ Ranking System',
                        value: '‚Ä¢ Check your server rank with `/level`\n‚Ä¢ View the leaderboard with `/leaderboard`\n‚Ä¢ See who\'s the most active in your server',
                        inline: false
                    },
                    {
                        name: 'üìä Progress Tracking',
                        value: '‚Ä¢ Visual progress bars in `/level`\n‚Ä¢ Track both message and voice activity\n‚Ä¢ See detailed statistics and time spent',
                        inline: false
                    },
                    {
                        name: '‚ö° Pro Tips',
                        value: '‚Ä¢ **Be active in voice channels** for consistent XP\n‚Ä¢ **Chat regularly** but respect the cooldown\n‚Ä¢ **Stay engaged** - both methods count!\n‚Ä¢ **Check `/level`** to track your progress',
                        inline: false
                    }
                )
                .setFooter({ 
                    text: 'Every message and minute in voice counts towards your level!',
                    iconURL: interaction.client.user.displayAvatarURL()
                });

            // Create level badges explanation embed
            const badgesEmbed = new EmbedBuilder()
                .setTitle('üéñÔ∏è Level Badges & Colors')
                .setColor('#aa00ff')
                .addFields(
                    {
                        name: 'üåü Beginner (Levels 1-4)',
                        value: '**Badge**: üåü Star\n**Color**: Blue\n**Description**: Just getting started!',
                        inline: true
                    },
                    {
                        name: '‚≠ê Regular (Levels 5-9)',
                        value: '**Badge**: ‚≠ê Bright Star\n**Color**: Green\n**Description**: Making good progress!',
                        inline: true
                    },
                    {
                        name: 'üî• Active (Levels 10-19)',
                        value: '**Badge**: üî• Fire\n**Color**: Orange\n**Description**: Really active member!',
                        inline: true
                    },
                    {
                        name: 'üíé Expert (Levels 20-49)',
                        value: '**Badge**: üíé Diamond\n**Color**: Cyan\n**Description**: Experienced community member!',
                        inline: true
                    },
                    {
                        name: 'üèÜ Master (Levels 50-99)',
                        value: '**Badge**: üèÜ Trophy\n**Color**: Gold\n**Description**: Master of the community!',
                        inline: true
                    },
                    {
                        name: 'üëë Legend (Level 100+)',
                        value: '**Badge**: üëë Crown\n**Color**: Purple\n**Description**: Legendary status achieved!',
                        inline: true
                    }
                )
                .setFooter({ 
                    text: 'Which badge will you earn next?',
                    iconURL: interaction.client.user.displayAvatarURL()
                });

            // Send all embeds
            await interaction.reply({ 
                embeds: [mainEmbed, examplesEmbed, tipsEmbed, badgesEmbed],
                ephemeral: false
            });

        } catch (error) {
            console.error('Error in levelexplain command:', error);
            await interaction.reply({
                content: '‚ùå An error occurred while explaining the leveling system!',
                ephemeral: true
            });
        }
    }
};
